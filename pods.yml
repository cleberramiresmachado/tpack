apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o pods.yml
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: app
      name: app
    spec:
      type: LoadBalancer
      ports:
        - name: "80"
          port: 80
          targetPort: 9080
        - name: "9443"
          port: 9443
          targetPort: 9443
      selector:
        io.kompose.service: app
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o pods.yml
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: db
      name: db
    spec:
      ports:
        - name: "3306"
          port: 3306
          targetPort: 3306
      selector:
        io.kompose.service: db
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o pods.yml
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: phpmyadmin
      name: phpmyadmin
    spec:
      type: LoadBalancer
      ports:
        - name: "8080"
          port: 8080
          targetPort: 80
      selector:
        io.kompose.service: phpmyadmin
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o pods.yml
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: app
      name: app
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: app
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o pods.yml
            kompose.version: 1.21.0 (992df58d8)
          creationTimestamp: null
          labels:
            io.kompose.service: app
        spec:
          containers:
            - args:
                - ./wait-for-it.sh
                - db:3306
                - --
                - liberty/bin/server
                - run
                - defaultServer
              image: rodrigoprestesmachado/tpack_app:0.1
              imagePullPolicy: ""
              name: tpack-app
              ports:
                - containerPort: 9080
                - containerPort: 9443
              resources: {}
          restartPolicy: Always
          serviceAccountName: ""
          volumes: null
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o pods.yml
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: db
      name: db
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: db
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o pods.yml
            kompose.version: 1.21.0 (992df58d8)
          creationTimestamp: null
          labels:
            io.kompose.service: db
        spec:
          containers:
            - env:
                - name: MYSQL_DATABASE
                  value: tpack
                - name: MYSQL_PASSWORD
                  value: tpack
                - name: MYSQL_ROOT_PASSWORD
                  value: tpack
                - name: MYSQL_USER
                  value: tpack
              image: mysql:latest
              imagePullPolicy: ""
              name: tpack-mysql
              ports:
                - containerPort: 3306
              resources: {}
              volumeMounts:
                - mountPath: /var/lib/mysql
                  name: database
          restartPolicy: Always
          serviceAccountName: ""
          volumes:
            - name: database
              persistentVolumeClaim:
                claimName: database
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: database
      name: database
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o pods.yml
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: phpmyadmin
      name: phpmyadmin
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: phpmyadmin
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o pods.yml
            kompose.version: 1.21.0 (992df58d8)
          creationTimestamp: null
          labels:
            io.kompose.service: phpmyadmin
        spec:
          containers:
            - env:
                - name: PMA_ARBITRARY
                  value: "1"
              image: phpmyadmin/phpmyadmin:latest
              imagePullPolicy: ""
              name: tpack-phpmyadmin
              ports:
                - containerPort: 80
              resources: {}
              volumeMounts:
                - mountPath: /sessions
                  name: phpmyadmin-claim0
          restartPolicy: Always
          serviceAccountName: ""
          volumes:
            - name: phpmyadmin-claim0
              persistentVolumeClaim:
                claimName: phpmyadmin-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: phpmyadmin-claim0
      name: phpmyadmin-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
kind: List
metadata: {}
